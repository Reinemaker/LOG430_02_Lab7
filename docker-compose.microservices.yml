services:
  # API Gateway with Nginx (exposed via Traefik)
  api-gateway:
    build:
      context: ./services/ApiGateway
      dockerfile: Dockerfile
    container_name: api-gateway
    environment:
      - NGINX_HOST=api.cornershop.localhost
    depends_on:
      - product-service
      - customer-service
      - cart-service-1
      - cart-service-2
      - cart-service-3
      - order-service
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-gateway.rule=Host(`api.cornershop.localhost`)"
      - "traefik.http.routers.api-gateway.entrypoints=web"
      # Security, CORS, rate limiting, logging, etc. (optional, but Nginx will handle most)
      - "traefik.http.services.api-gateway.loadbalancer.server.port=80"

  # Product Management Service
  product-service:
    build:
      context: .
      dockerfile: services/ProductService/Dockerfile
    container_name: product-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - MongoDB__ConnectionString=mongodb://mongodb:27017
      - MongoDB__DatabaseName=cornerShop
      - ConnectionStrings__Redis=redis:6379
    depends_on:
      - mongodb
      - redis
    # No Traefik labels for /api/*

  # Sales Management Service
  sales-service:
    build:
      context: ./services/SalesService
      dockerfile: Dockerfile
    container_name: sales-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - MongoDB__ConnectionString=mongodb://mongodb:27017
      - MongoDB__DatabaseName=cornerShop
      - ConnectionStrings__Redis=redis:6379
    depends_on:
      - mongodb
      - redis
    # No Traefik labels for /api/*

  # Customer Management Service
  customer-service:
    build:
      context: .
      dockerfile: services/CustomerService/Dockerfile
    container_name: customer-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - MongoDB__ConnectionString=mongodb://mongodb:27017
      - MongoDB__DatabaseName=cornerShop
      - ConnectionStrings__Redis=redis:6379
    depends_on:
      - mongodb
      - redis
    # No Traefik labels for /api/*

  # Shopping Cart Service - Instance 1
  cart-service-1:
    build:
      context: .
      dockerfile: services/CartService/Dockerfile
    container_name: cart-service-1
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionStrings__Redis=redis:6379
      - SERVICE_INSTANCE=1
    depends_on:
      - redis
    # No Traefik labels for /api/*

  # Shopping Cart Service - Instance 2
  cart-service-2:
    build:
      context: .
      dockerfile: services/CartService/Dockerfile
    container_name: cart-service-2
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionStrings__Redis=redis:6379
      - SERVICE_INSTANCE=2
    depends_on:
      - redis
    # No Traefik labels for /api/*

  # Shopping Cart Service - Instance 3
  cart-service-3:
    build:
      context: .
      dockerfile: services/CartService/Dockerfile
    container_name: cart-service-3
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionStrings__Redis=redis:6379
      - SERVICE_INSTANCE=3
    depends_on:
      - redis
    # No Traefik labels for /api/*

  # Order Management Service
  order-service:
    build:
      context: .
      dockerfile: services/OrderService/Dockerfile
    container_name: order-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - MongoDB__ConnectionString=mongodb://mongodb:27017
      - MongoDB__DatabaseName=cornerShop
      - ConnectionStrings__Redis=redis:6379
    depends_on:
      - mongodb
      - redis
    # No Traefik labels for /api/*

  # Reporting Service
  reporting-service:
    build:
      context: ./services/ReportingService
      dockerfile: Dockerfile
    container_name: reporting-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - MongoDB__ConnectionString=mongodb://mongodb:27017
      - MongoDB__DatabaseName=cornerShop
    depends_on:
      - mongodb
    # No Traefik labels for /api/*

  # Shared Stock Service
  stock-service:
    build:
      context: ./services/StockService
      dockerfile: Dockerfile
    container_name: stock-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - MongoDB__ConnectionString=mongodb://mongodb:27017
      - MongoDB__DatabaseName=cornerShop
      - ConnectionStrings__Redis=redis:6379
    depends_on:
      - mongodb
      - redis
    # No Traefik labels for /api/*

  # Traefik Load Balancer
  traefik:
    image: traefik:v2.10
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.entrypoints=web"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  # MongoDB
  mongodb:
    image: mongo:7.0
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password

  # Redis for caching and cart storage
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards

volumes:
  mongodb_data:
  redis_data:
  prometheus_data:
  grafana_data: 