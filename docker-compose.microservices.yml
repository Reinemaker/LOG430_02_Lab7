services:
  # API Gateway with Nginx (exposed via Traefik)
  api-gateway:
    build:
      context: .
      dockerfile: services/ApiGateway/Dockerfile
    container_name: api-gateway
    environment:
      - NGINX_HOST=api.cornershop.localhost
    depends_on:
      - product-service
      - customer-service
      - cart-service-1
      - cart-service-2
      - cart-service-3
      - order-service
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-gateway.rule=Host(`api.cornershop.localhost`)"
      - "traefik.http.routers.api-gateway.entrypoints=web"
      # Security, CORS, rate limiting, logging, etc. (optional, but Nginx will handle most)
      - "traefik.http.services.api-gateway.loadbalancer.server.port=80"

  # Product Management Service
  product-service:
    build:
      context: .
      dockerfile: services/ProductService/Dockerfile
    container_name: product-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - MongoDB__ConnectionString=mongodb://mongodb:27017
      - MongoDB__DatabaseName=cornerShop
      - ConnectionStrings__Redis=redis:6379
    depends_on:
      - mongodb
      - redis
    # No Traefik labels for /api/*

  # Sales Management Service
  sales-service:
    build:
      context: .
      dockerfile: services/SalesService/Dockerfile
    container_name: sales-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - MongoDB__ConnectionString=mongodb://mongodb:27017
      - MongoDB__DatabaseName=cornerShop
      - ConnectionStrings__Redis=redis:6379
    depends_on:
      - mongodb
      - redis
    # No Traefik labels for /api/*

  # Customer Management Service
  customer-service:
    build:
      context: .
      dockerfile: services/CustomerService/Dockerfile
    container_name: customer-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - MongoDB__ConnectionString=mongodb://mongodb:27017
      - MongoDB__DatabaseName=cornerShop
      - ConnectionStrings__Redis=redis:6379
    depends_on:
      - mongodb
      - redis
    # No Traefik labels for /api/*

  # Shopping Cart Service - Instance 1
  cart-service-1:
    build:
      context: .
      dockerfile: services/CartService/Dockerfile
    container_name: cart-service-1
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionStrings__Redis=redis:6379
      - SERVICE_INSTANCE=1
    depends_on:
      - redis
    # No Traefik labels for /api/*

  # Shopping Cart Service - Instance 2
  cart-service-2:
    build:
      context: .
      dockerfile: services/CartService/Dockerfile
    container_name: cart-service-2
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionStrings__Redis=redis:6379
      - SERVICE_INSTANCE=2
    depends_on:
      - redis
    # No Traefik labels for /api/*

  # Shopping Cart Service - Instance 3
  cart-service-3:
    build:
      context: .
      dockerfile: services/CartService/Dockerfile
    container_name: cart-service-3
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionStrings__Redis=redis:6379
      - SERVICE_INSTANCE=3
    depends_on:
      - redis
    # No Traefik labels for /api/*

  # Order Management Service
  order-service:
    build:
      context: .
      dockerfile: services/OrderService/Dockerfile
    container_name: order-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - MongoDB__ConnectionString=mongodb://mongodb:27017
      - MongoDB__DatabaseName=cornerShop
      - ConnectionStrings__Redis=redis:6379
    depends_on:
      - mongodb
      - redis
    # No Traefik labels for /api/*

  # Payment Management Service
  payment-service:
    build:
      context: .
      dockerfile: services/PaymentService/Dockerfile
    container_name: payment-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionStrings__Redis=redis:6379
    depends_on:
      - redis
    # No Traefik labels for /api/*

  # Reporting Service
  reporting-service:
    build:
      context: .
      dockerfile: services/ReportingService/Dockerfile
    container_name: reporting-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - MongoDB__ConnectionString=mongodb://mongodb:27017
      - MongoDB__DatabaseName=cornerShop
    depends_on:
      - mongodb
    # No Traefik labels for /api/*

  # Saga Orchestrator Service
  saga-orchestrator:
    build:
      context: .
      dockerfile: services/SagaOrchestrator/Dockerfile
    container_name: saga-orchestrator
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionStrings__Redis=redis:6379
    depends_on:
      - redis
      - stock-service
      - payment-service
      - order-service
    # No Traefik labels for /api/*

  # Choreographed Saga Coordinator Service
  choreographed-saga-coordinator:
    build:
      context: .
      dockerfile: services/ChoreographedSagaCoordinator/Dockerfile
    container_name: choreographed-saga-coordinator
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionStrings__Redis=redis:6379
    depends_on:
      - redis
      - stock-service
      - payment-service
      - order-service
      - notification-service
    # No Traefik labels for /api/*

  # Shared Stock Service
  stock-service:
    build:
      context: .
      dockerfile: services/StockService/Dockerfile
    container_name: stock-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionStrings__Redis=redis:6379
    depends_on:
      - redis
    # No Traefik labels for /api/*

  # Event Store Service
  event-store:
    build:
      context: .
      dockerfile: services/EventStore/Dockerfile
    container_name: event-store
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - MongoDB__ConnectionString=mongodb://mongodb:27017
      - MongoDB__DatabaseName=cornerShop
      - Kafka__BootstrapServers=kafka:29092
    depends_on:
      - mongodb
      - kafka
    # No Traefik labels for /api/*

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: services/NotificationService/Dockerfile
    container_name: notification-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - Kafka__BootstrapServers=kafka:29092
    depends_on:
      - kafka
    # No Traefik labels for /api/*

  # Traefik Load Balancer
  traefik:
    image: traefik:v2.10
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.entrypoints=web"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  # MongoDB
  mongodb:
    image: mongo:7.0
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password

  # Redis for caching and cart storage
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log

  # Kafka Event Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data

  # Kafka UI for management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

volumes:
  mongodb_data:
  redis_data:
  prometheus_data:
  grafana_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data: 