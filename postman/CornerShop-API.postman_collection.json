{
  "info": {
    "name": "CornerShop Microservices API",
    "description": "Complete Postman collection for testing the CornerShop microservices API through the API Gateway. This collection includes all endpoints for products, customers, cart, and orders with proper authentication and error handling.",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://api.cornershop.localhost",
      "type": "string"
    },
    {
      "key": "apiKey",
      "value": "cornershop-api-key-2024",
      "type": "string"
    },
    {
      "key": "customerId",
      "value": "",
      "type": "string"
    },
    {
      "key": "productId",
      "value": "",
      "type": "string"
    },
    {
      "key": "orderId",
      "value": "",
      "type": "string"
    }
  ],
  "auth": {
    "type": "apikey",
    "apikey": [
      {
        "key": "X-API-Key",
        "value": "{{apiKey}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Health Check",
      "item": [
        {
          "name": "Gateway Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Check the health status of the API Gateway. This endpoint does not require authentication."
          },
          "response": []
        }
      ],
      "description": "Health check endpoints for monitoring service status"
    },
    {
      "name": "Products",
      "item": [
        {
          "name": "Get All Products",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products?page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit",
                  "value": "20",
                  "description": "Number of items per page"
                },
                {
                  "key": "category",
                  "value": "",
                  "description": "Filter by product category (optional)",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieve a list of all available products with pagination support."
          },
          "response": []
        },
        {
          "name": "Get Product by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "{{productId}}"]
            },
            "description": "Retrieve a specific product by its ID."
          },
          "response": []
        },
        {
          "name": "Create New Product",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Sample Product\",\n  \"description\": \"A sample product for testing\",\n  \"price\": 29.99,\n  \"category\": \"Electronics\",\n  \"stockQuantity\": 100,\n  \"imageUrl\": \"https://example.com/image.jpg\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"]
            },
            "description": "Create a new product in the system."
          },
          "response": []
        },
        {
          "name": "Update Product",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Product Name\",\n  \"description\": \"Updated product description\",\n  \"price\": 39.99,\n  \"category\": \"Electronics\",\n  \"stockQuantity\": 75,\n  \"imageUrl\": \"https://example.com/updated-image.jpg\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "{{productId}}"]
            },
            "description": "Update an existing product."
          },
          "response": []
        },
        {
          "name": "Delete Product",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "{{productId}}"]
            },
            "description": "Delete a product from the system."
          },
          "response": []
        }
      ],
      "description": "Product management operations including CRUD operations"
    },
    {
      "name": "Customers",
      "item": [
        {
          "name": "Get All Customers",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/customers?page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["api", "customers"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit",
                  "value": "20",
                  "description": "Number of items per page"
                }
              ]
            },
            "description": "Retrieve a list of all customers with pagination support."
          },
          "response": []
        },
        {
          "name": "Get Customer by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/customers/{{customerId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "customers", "{{customerId}}"]
            },
            "description": "Retrieve a specific customer by ID."
          },
          "response": []
        },
        {
          "name": "Create New Customer",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1-555-123-4567\",\n  \"address\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"Anytown\",\n    \"state\": \"CA\",\n    \"postalCode\": \"12345\",\n    \"country\": \"USA\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/customers",
              "host": ["{{baseUrl}}"],
              "path": ["api", "customers"]
            },
            "description": "Create a new customer account."
          },
          "response": []
        }
      ],
      "description": "Customer management operations"
    },
    {
      "name": "Cart",
      "item": [
        {
          "name": "Get Cart",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/cart?customerId={{customerId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cart"],
              "query": [
                {
                  "key": "customerId",
                  "value": "{{customerId}}",
                  "description": "Customer ID"
                }
              ]
            },
            "description": "Retrieve the current user's shopping cart."
          },
          "response": []
        },
        {
          "name": "Add Item to Cart",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"customerId\": \"{{customerId}}\",\n  \"productId\": \"{{productId}}\",\n  \"quantity\": 2\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/cart",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cart"]
            },
            "description": "Add a product to the shopping cart."
          },
          "response": []
        },
        {
          "name": "Remove Item from Cart",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/cart/{{customerId}}/items/item-123",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cart", "{{customerId}}", "items", "item-123"]
            },
            "description": "Remove a specific item from the cart."
          },
          "response": []
        }
      ],
      "description": "Shopping cart operations"
    },
    {
      "name": "Orders",
      "item": [
        {
          "name": "Get All Orders",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/orders?page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit",
                  "value": "20",
                  "description": "Number of items per page"
                },
                {
                  "key": "customerId",
                  "value": "",
                  "description": "Filter by customer ID (optional)",
                  "disabled": true
                },
                {
                  "key": "status",
                  "value": "",
                  "description": "Filter by order status (optional)",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieve a list of all orders with pagination and filtering support."
          },
          "response": []
        },
        {
          "name": "Get Order by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/orders/{{orderId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "{{orderId}}"]
            },
            "description": "Retrieve a specific order by ID."
          },
          "response": []
        },
        {
          "name": "Create New Order",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"customerId\": \"{{customerId}}\",\n  \"shippingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"Anytown\",\n    \"state\": \"CA\",\n    \"postalCode\": \"12345\",\n    \"country\": \"USA\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/orders",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders"]
            },
            "description": "Create a new order from cart items."
          },
          "response": []
        },
        {
          "name": "Update Order Status",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"confirmed\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/orders/{{orderId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "{{orderId}}"]
            },
            "description": "Update the status of an order."
          },
          "response": []
        }
      ],
      "description": "Order management operations"
    },
    {
      "name": "Authentication Tests",
      "item": [
        {
          "name": "Test Without API Key",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"]
            },
            "description": "Test API access without providing an API key. Should return 401 Unauthorized."
          },
          "response": []
        },
        {
          "name": "Test With Invalid API Key",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "invalid-key"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"]
            },
            "description": "Test API access with an invalid API key. Should return 403 Forbidden."
          },
          "response": []
        }
      ],
      "description": "Authentication and authorization tests"
    },
    {
      "name": "Error Handling Tests",
      "item": [
        {
          "name": "Test Non-existent Endpoint",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/nonexistent",
              "host": ["{{baseUrl}}"],
              "path": ["api", "nonexistent"]
            },
            "description": "Test access to a non-existent endpoint. Should return 404 Not Found."
          },
          "response": []
        },
        {
          "name": "Test Invalid Product ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products/invalid-id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "invalid-id"]
            },
            "description": "Test access to a product with an invalid ID. Should return 404 Not Found."
          },
          "response": []
        }
      ],
      "description": "Error handling and edge case tests"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set default headers for all requests",
          "pm.request.headers.add({\n    key: 'X-API-Key',\n    value: pm.collectionVariables.get('apiKey')\n});",
          "",
          "// Add request timestamp for logging",
          "pm.request.headers.add({\n    key: 'X-Request-Timestamp',\n    value: new Date().toISOString()\n});"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Common test script for all requests",
          "pm.test(\"Status code is valid\", function () {",
          "    pm.response.to.have.status(200, 201, 204, 401, 403, 404, 429);",
          "});",
          "",
          "pm.test(\"Response time is less than 5000ms\", function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test(\"Response has required headers\", function () {",
          "    pm.response.to.have.header(\"Content-Type\");",
          "    pm.response.to.have.header(\"X-Gateway-Version\");",
          "    pm.response.to.have.header(\"X-Request-ID\");",
          "});",
          "",
          "// Test for JSON responses",
          "if (pm.response.headers.get(\"Content-Type\") && pm.response.headers.get(\"Content-Type\").includes(\"application/json\")) {",
          "    pm.test(\"Response is valid JSON\", function () {",
          "        pm.response.to.be.json;",
          "    });",
          "}",
          "",
          "// Store dynamic values for subsequent requests",
          "if (pm.response.code === 201 || pm.response.code === 200) {",
          "    const responseJson = pm.response.json();",
          "    ",
          "    // Store customer ID if present",
          "    if (responseJson.id && pm.request.url.path.includes('customers')) {",
          "        pm.collectionVariables.set('customerId', responseJson.id);",
          "    }",
          "    ",
          "    // Store product ID if present",
          "    if (responseJson.id && pm.request.url.path.includes('products')) {",
          "        pm.collectionVariables.set('productId', responseJson.id);",
          "    }",
          "    ",
          "    // Store order ID if present",
          "    if (responseJson.id && pm.request.url.path.includes('orders')) {",
          "        pm.collectionVariables.set('orderId', responseJson.id);",
          "    }",
          "}"
        ]
      }
    }
  ]
} 