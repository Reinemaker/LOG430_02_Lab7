events {
    worker_connections 1024;
}

http {
    # Enhanced logging with security information
    log_format security '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for" '
                       'upstream: $upstream_addr '
                       'api_key: $http_x_api_key '
                       'request_id: $request_id '
                       'response_time: $request_time';

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'upstream: $upstream_addr';

    # Access logs for security monitoring
    access_log /var/log/nginx/access.log main;
    access_log /var/log/nginx/security.log security;
    error_log /var/log/nginx/error.log;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=strict:10m rate=5r/s;
    limit_req_zone $http_x_api_key zone=api_key:10m rate=20r/s;

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

    # Upstream servers
    upstream product_service {
        server product-service:80;
    }

    upstream customer_service {
        server customer-service:80;
    }

    upstream cart_service {
        server cart-service:80;
    }

    upstream order_service {
        server order-service:80;
    }

    server {
        listen 80;
        server_name api.cornershop.localhost;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';" always;

        # CORS Configuration
        add_header Access-Control-Allow-Origin "https://cornershop.localhost, http://localhost:3000, http://localhost:8080" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization, X-API-Key" always;
        add_header Access-Control-Allow-Credentials "true" always;
        add_header Access-Control-Max-Age "86400" always;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "https://cornershop.localhost, http://localhost:3000, http://localhost:8080" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization, X-API-Key" always;
            add_header Access-Control-Allow-Credentials "true" always;
            add_header Access-Control-Max-Age "86400" always;
            add_header Content-Type "text/plain charset=UTF-8";
            add_header Content-Length 0;
            return 204;
        }

        # API Key validation middleware
        location / {
            # Check for API key in header
            if ($http_x_api_key = "") {
                return 401 '{"error": "API key required", "code": "MISSING_API_KEY"}';
            }

            # Validate API key (simple example - in production use proper validation)
            if ($http_x_api_key != "cornershop-api-key-2024") {
                return 403 '{"error": "Invalid API key", "code": "INVALID_API_KEY"}';
            }

            # Connection limiting
            limit_conn conn_limit 10;

            # Rate limiting with different zones
            limit_req zone=api burst=20 nodelay;
            limit_req zone=api_key burst=30 nodelay;

            # Add custom headers
            add_header X-Gateway-Version "1.0";
            add_header X-Request-ID $request_id;
            add_header X-Forwarded-For $proxy_add_x_forwarded_for;
            add_header X-Real-IP $remote_addr;

            # Dynamic routing based on path with enhanced security
            location /api/products {
                # Strict rate limiting for product service
                limit_req zone=strict burst=10 nodelay;
                
                proxy_pass http://product_service;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-API-Key $http_x_api_key;
                proxy_set_header X-Request-ID $request_id;
                
                # Timeout settings
                proxy_connect_timeout 30s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
            }

            location /api/customers {
                # Customer data requires strict security
                limit_req zone=strict burst=5 nodelay;
                
                proxy_pass http://customer_service;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-API-Key $http_x_api_key;
                proxy_set_header X-Request-ID $request_id;
                
                # Timeout settings
                proxy_connect_timeout 30s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
            }

            location /api/cart {
                # Cart service with standard rate limiting
                limit_req zone=api burst=20 nodelay;
                
                proxy_pass http://cart_service;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-API-Key $http_x_api_key;
                proxy_set_header X-Request-ID $request_id;
                
                # Timeout settings
                proxy_connect_timeout 30s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
            }

            location /api/orders {
                # Order service with strict rate limiting
                limit_req zone=strict burst=10 nodelay;
                
                proxy_pass http://order_service;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-API-Key $http_x_api_key;
                proxy_set_header X-Request-ID $request_id;
                
                # Timeout settings
                proxy_connect_timeout 30s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
            }

            # Health check endpoint
            location /health {
                return 200 '{"status": "healthy", "gateway": "traefik-nginx", "timestamp": "$time_iso8601"}';
                add_header Content-Type application/json;
            }

            # Default route
            location / {
                return 404 '{"error": "Service not found", "available_routes": ["/api/products", "/api/customers", "/api/cart", "/api/orders"]}';
                add_header Content-Type application/json;
            }
        }
    }
} 